//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------



namespace Feliz

open System
open Browser.Types
open Fable.Core.JsInterop
open Fable.Core
open Feliz

type IButtonProperty =
    interface
    end

and IRowProperty =
    interface
    end

and IColProperty =
    interface
    end

and ILayoutProperty =
    interface
    end

and ILayoutHeaderProperty =
    interface
    end

and ILayoutContentProperty =
    interface
    end

and IMenuProperty =
    interface
    end

and IBreadcrumbProperty =
    interface
    end

and IBreadcrumbItemProperty =
    interface
    end

and ITreeProperty =
    interface
    end

[<RequireQualifiedAccess>]
[<Erase>]
module Interop =
    let inline mkButtonAttr (key: string) (value: obj) : IButtonProperty = unbox (key, value)
    let inline mkRowAttr (key: string) (value: obj) : IRowProperty = unbox (key, value)
    let inline mkColAttr (key: string) (value: obj) : IColProperty = unbox (key, value)
    let inline mkLayoutAttr (key: string) (value: obj) : ILayoutProperty = unbox (key, value)
    let inline mkLayoutHeaderAttr (key: string) (value: obj) : ILayoutHeaderProperty = unbox (key, value)
    let inline mkLayoutContentAttr (key: string) (value: obj) : ILayoutContentProperty = unbox (key, value)
    let inline mkMenuAttr (key: string) (value: obj) : IMenuProperty = unbox (key, value)
    let inline mkBreadcrumbAttr (key: string) (value: obj) : IBreadcrumbProperty = unbox (key, value)
    let inline mkBreadcrumbItemAttr (key: string) (value: obj) : IBreadcrumbItemProperty = unbox (key, value)
    let inline mkTreeAttr (key: string) (value: obj) : ITreeProperty = unbox (key, value)

[<Erase>]
module AntdReact =

    type TreeCheckEvent<'T> =
        { [<CompiledName("checked")>]
          isChecked: bool
          checkedNodes: 'T array
          event: Event
          halfCheckedKeys: string array }


    type TreeExpandEvent<'T> = { expanded: bool; node: 'T }


    type TreeSelectedEvent<'T> =
        { selected: bool
          selectedNodes: 'T array
          node: 'T
          event: Event }


    type TreeDropEvent<'T> =
        { event: Event
          node: 'T
          dragNode: 'T
          dragNodesKeys: string array
          dropPosition: int
          dropToGap: bool }


    type TreeMouseEvent<'T> = { event: React; node: 'T }


    type TreeData =
        { key: U2<string, int>
          title: U2<ReactElement, Func<TreeData, ReactElement>>
          icon: U2<ReactElement, Func<TreeData, ReactElement>> option
          children: TreeData array
          disabled: bool
          selectable: bool }

    [<StringEnum; RequireQualifiedAccess>]
    type DirectoryTreeExpandAction =
        | Click
        | DoubleClick

    [<Erase>]
    type BreadcrumbImport = { Item: obj }

    [<StringEnum; RequireQualifiedAccess>]
    type MenuTheme =
        | Dark
        | Light

    [<StringEnum; RequireQualifiedAccess>]
    type MenuMode =
        | Horizontal
        | Inline
        | [<CompiledName("vertical-left")>] VerticalLeft
        | [<CompiledName("vertical-right")>] VerticalRight


    type MenuItemType =
        | MenuItemType of
            {| danger: bool option
               disabled: bool option
               icon: ReactElement option
               key: string
               label: ReactElement
               title: string |}

    [<RequireQualifiedAccess>]
    type ColFlex =
        | Number of value: int
        | None
        | Auto
        | String of value: string

    [<StringEnum; RequireQualifiedAccess>]
    type RowJustify =
        | Start
        | End
        | Center
        | [<CompiledName("spaced-around")>] SpaceAround
        | [<CompiledName("spaced-between")>] SpaceBetween
        | [<CompiledName("spaced-evenly")>] SpaceEvenly

    [<StringEnum; RequireQualifiedAccess>]
    type RowAlign =
        | Top
        | Middle
        | Bottom
        | Stretch


    type Layout =
        { Header: obj
          Content: obj
          Footer: obj }

    [<Erase>]

    type button() =
        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<IButtonProperty> (prop.children elements)

        static member inline className(value: string) = Interop.mkButtonAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkButtonAttr "className" (String.concat " " names)

        static member inline disabled(value: bool) = Interop.mkButtonAttr "disabled" value
        static member inline label(value: string) = Interop.mkButtonAttr "label" value

    [<Erase>]

    type row =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkRowAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<IRowProperty> (prop.children elements)

        static member inline className(value: string) = Interop.mkRowAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkRowAttr "className" (String.concat " " names)

        static member inline align(value: RowAlign) = Interop.mkRowAttr "align" value
        static member inline justify(value: RowJustify) = Interop.mkRowAttr "justify" value
        static member inline wrap(value: bool) = Interop.mkRowAttr "wrap" value

    [<Erase>]

    type col =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkColAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<IColProperty> (prop.children elements)

        static member inline className(value: string) = Interop.mkColAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkColAttr "className" (String.concat " " names)

        static member inline span(value: int) = Interop.mkColAttr "span" value
        static member inline pull(value: int) = Interop.mkColAttr "pull" value
        static member inline push(value: int) = Interop.mkColAttr "push" value
        static member inline offset(value: int) = Interop.mkColAttr "offset" value

        static member inline flex(value: ColFlex) =
            let output: obj =
                match value with
                | ColFlex.None -> "none"
                | ColFlex.Auto -> "auto"
                | ColFlex.String value -> value
                | ColFlex.Number value -> value

            Interop.mkColAttr "flex" output

    [<Erase>]

    type layout =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkLayoutAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<ILayoutProperty> (prop.children elements)

        static member inline className(value: string) = Interop.mkLayoutAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkLayoutAttr "className" (String.concat " " names)

        static member inline hasSider(value: bool) = Interop.mkLayoutAttr "hasSider" value

    [<Erase>]

    type layoutHeader =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkLayoutHeaderAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<ILayoutHeaderProperty> (prop.children elements)

        static member inline className(value: string) =
            Interop.mkLayoutHeaderAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkLayoutHeaderAttr "className" (String.concat " " names)

        static member inline hasSider(value: bool) =
            Interop.mkLayoutHeaderAttr "hasSider" value

    [<Erase>]

    type layoutContent =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkLayoutContentAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<ILayoutContentProperty> (prop.children elements)

        static member inline className(value: string) =
            Interop.mkLayoutContentAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkLayoutContentAttr "className" (String.concat " " names)

    [<Erase>]

    type menu =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkMenuAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<IMenuProperty> (prop.children elements)

        static member inline className(value: string) = Interop.mkMenuAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkMenuAttr "className" (String.concat " " names)

        static member inline defaultOpenKeys(value: string seq) =
            Interop.mkMenuAttr "defaultOpenKeys" (Array.ofSeq value)

        static member inline defaultSelectedKeys(value: string seq) =
            Interop.mkMenuAttr "defaultSelectedKeys" (Array.ofSeq value)

        static member inline selectedKeys(value: string seq) =
            Interop.mkMenuAttr "selectedKeys" (Array.ofSeq value)

        static member inline mode(value: MenuMode) = Interop.mkMenuAttr "mode" value
        static member inline theme(value: MenuTheme) = Interop.mkMenuAttr "theme" value

        static member inline items(value: MenuItemType list) =
            let attrs =
                List.map
                    (function
                    | MenuItemType obj -> obj)
                    value

            Interop.mkMenuAttr "items" (Array.ofSeq attrs)

    [<Erase>]

    type breadcrumb =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkBreadcrumbAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<IBreadcrumbProperty> (prop.children elements)

        static member inline className(value: string) =
            Interop.mkBreadcrumbAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkBreadcrumbAttr "className" (String.concat " " names)

    [<Erase>]

    type breadcrumbItem =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkBreadcrumbItemAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<IBreadcrumbItemProperty> (prop.children elements)

        static member inline className(value: string) =
            Interop.mkBreadcrumbItemAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkBreadcrumbItemAttr "className" (String.concat " " names)

        static member inline href(value: string) =
            Interop.mkBreadcrumbItemAttr "href" value

        static member inline onClick(value: MouseEvent -> unit) =
            Interop.mkBreadcrumbItemAttr "onClick" value

    [<Erase>]

    type tree =
        static member inline style(properties: #IStyleAttribute list) =
            Interop.mkTreeAttr "style" (createObj !!properties)

        static member inline children(elements: Fable.React.ReactElement list) =
            unbox<ITreeProperty> (prop.children elements)

        static member inline className(value: string) = Interop.mkTreeAttr "className" value

        static member inline className(names: seq<string>) =
            Interop.mkTreeAttr "className" (String.concat " " names)

        static member inline autoExpandParent(v: bool) = Interop.mkTreeAttr "autoExpandParent" v

        static member inline blockNode(?v: bool) =
            Interop.mkTreeAttr "blockNode" (Option.defaultValue true v)

        static member inline checkable(?v: bool) =
            Interop.mkTreeAttr "checkable" (Option.defaultValue true v)

        static member inline checkedKeys(v: string seq) =
            Interop.mkTreeAttr "checkedKeys" (Array.ofSeq v)

        static member inline checkStrictly(?v: bool) =
            Interop.mkTreeAttr "checkStrictly" (Option.defaultValue true v)

        static member inline defaultCheckedKeys(v: string seq) =
            Interop.mkTreeAttr "defaultCheckedKeys" (Array.ofSeq v)

        static member inline defaultExpandAll(?v: bool) =
            Interop.mkTreeAttr "defaultExpandAll" (Option.defaultValue true v)

        static member inline defaultExpandedKeys(v: string seq) =
            Interop.mkTreeAttr "defaultExpandedKeys" (Array.ofSeq v)

        static member inline defaultExpandParent(?v: bool) =
            Interop.mkTreeAttr "defaultExpandParent" (Option.defaultValue true v)

        static member inline defaultSelectedKeys(v: string seq) =
            Interop.mkTreeAttr "defaultSelectedKeys" (Array.ofSeq v)

        static member inline disabled(?v: bool) =
            Interop.mkTreeAttr "disabled" (Option.defaultValue true v)

        static member inline draggable(?v: bool) =
            Interop.mkTreeAttr "draggable" (Option.defaultValue true v)

        static member inline expandedKeys(v: string seq) =
            Interop.mkTreeAttr "expandedKeys" (Array.ofSeq v)

        static member inline filterTreeNode(v: 'TEntity -> bool) = Interop.mkTreeAttr "filterTreeNode" v
        static member inline height(v: float) = Interop.mkTreeAttr "height" v
        static member inline icon(v: ReactElement) = Interop.mkTreeAttr "icon" v
        static member inline loadData(v: 'T -> unit) = Interop.mkTreeAttr "loadData" v

        static member inline loadedKeys(v: string seq) =
            Interop.mkTreeAttr "loadedKeys" (Array.ofSeq v)

        static member inline multiple(?v: bool) =
            Interop.mkTreeAttr "multiple" (Option.defaultValue true v)

        static member inline selectable(?v: bool) =
            Interop.mkTreeAttr "selectable" (Option.defaultValue true v)

        static member inline selectedKeys(v: string seq) =
            Interop.mkTreeAttr "selectedKeys" (Array.ofSeq v)

        static member inline showIcon(?v: bool) =
            Interop.mkTreeAttr "showIcon" (Option.defaultValue true v)

        static member inline showLine(?v: bool) =
            Interop.mkTreeAttr "showLine" (Option.defaultValue true v)

        static member inline switcherIcon(v: ReactElement) = Interop.mkTreeAttr "switcherIcon" v
        static member inline titleRender(v: Func<'TEntity, ReactElement>) = Interop.mkTreeAttr "titleRender" v

        static member inline treeData(v: TreeData seq) =
            Interop.mkTreeAttr "treeData" (Array.ofSeq v)

        static member inline virtualize(?v: bool) =
            Interop.mkTreeAttr "virtual" (Option.defaultValue true v)

        static member inline onCheck(v: Func<string array, TreeCheckEvent<'T>, unit>) = Interop.mkTreeAttr "onCheck" v
        static member inline onDragEnd(v: TreeMouseEvent<'TEntity> -> unit) = Interop.mkTreeAttr "onDragEnd" v
        static member inline onDragEnter(v: TreeMouseEvent<'TEntity> -> unit) = Interop.mkTreeAttr "onDragEnter" v
        static member inline onDragLeave(v: TreeMouseEvent<'TEntity> -> unit) = Interop.mkTreeAttr "onDragLeave" v
        static member inline onDragOver(v: TreeMouseEvent<'TEntity> -> unit) = Interop.mkTreeAttr "onDragOver" v
        static member inline onDragStart(v: TreeMouseEvent<'TEntity> -> unit) = Interop.mkTreeAttr "onDragStart" v
        static member inline onDrop(v: TreeDropEvent<'TEntity> -> unit) = Interop.mkTreeAttr "onDrop" v

        static member inline onExpand<'T>(v: Func<string array, TreeExpandEvent<'T>, unit>) =
            Interop.mkTreeAttr "onExpand" v

        static member inline onLoad(v: Func<string array, TreeMouseEvent<'T>, unit>) = Interop.mkTreeAttr "onLoad" v
        static member inline onRightClick(v: TreeMouseEvent<'TEntity> -> unit) = Interop.mkTreeAttr "onRightClick" v

        static member inline onSelect(v: Func<string array, TreeSelectedEvent<'T>, unit>) =
            Interop.mkTreeAttr "onSelect" v

[<Erase>]

type Antd =
    class
        static member inline button(properties: IButtonProperty list) =
            Interop.reactApi.createElement (import "Button" "antd", createObj !!properties)

        static member inline row(properties: IRowProperty list) =
            Interop.reactApi.createElement (import "Row" "antd", createObj !!properties)

        static member inline col(properties: IColProperty list) =
            Interop.reactApi.createElement (import "Col" "antd", createObj !!properties)

        static member inline layout(properties: ILayoutProperty list) =
            Interop.reactApi.createElement (import "Layout" "antd", createObj !!properties)

        static member inline layoutHeader(properties: ILayoutHeaderProperty list) =
            Interop.reactApi.createElement ((import<AntdReact.Layout> "Layout" "antd").Header, createObj !!properties)

        static member inline layoutContent(properties: ILayoutContentProperty list) =
            Interop.reactApi.createElement ((import<AntdReact.Layout> "Layout" "antd").Content, createObj !!properties)

        static member inline menu(properties: IMenuProperty list) =
            Interop.reactApi.createElement (import "Menu" "antd", createObj !!properties)

        static member inline breadcrumb(properties: IBreadcrumbProperty list) =
            Interop.reactApi.createElement (import "Breadcrumb" "antd", createObj !!properties)

        static member inline breadcrumbItem(properties: IBreadcrumbItemProperty list) =
            Interop.reactApi.createElement (
                (import<AntdReact.BreadcrumbImport> "Breadcrumb" "antd")
                    .Item,
                createObj !!properties
            )

        static member inline tree(properties: ITreeProperty list) =
            Interop.reactApi.createElement ((import "Tree" "antd"), createObj !!properties)
    end

